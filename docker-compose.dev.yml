services:
  mongo:
    image: mongo:6
    container_name: mongodb
    # volumes:
    #   - ./data/mongo:/data/db
    ports:
      - 27017:27017
    networks:
      - ms-service
  postgres:
    image: postgres:16.0
    environment:
      POSTGRES_DB: product_master
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    # volumes:
    #   - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    networks:
      - ms-service
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    expose:
      - '2181'
    networks:
      - ms-service
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ms-service
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8081:8080
    depends_on:
      - 'kafka'
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true' # not necessary, added for tests
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: 'true'
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: 'true'
    networks:
      - ms-service
  jaeger:
    image: jaegertracing/all-in-one:1.41
    container_name: jaeger
    ports:
      - '16686:16686' # Jaeger UI
      - '14317:4317' # OTLP gRPC
      - '4318:4318' # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - ms-service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      - ENV=docker
      - DB_HOST=postgres
    volumes:
      - ./product-service/logs:/logs
      - ./product-service/configs:/configs
    ports:
      - 8082:8082
    depends_on:
      - mongo
      - postgres
      - kafka
      - jaeger
    networks:
      - ms-service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - ENV=docker
      - MONGO_URI=mongodb://mongo:27017
    volumes:
      - ./user-service/logs:/logs
      - ./user-service/configs:/configs
    ports:
      - 8080:8080
    depends_on:
      - mongo
      - postgres
      - kafka
      - jaeger
    networks:
      - ms-service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - ENV=docker
      - MONGO_URI=mongodb://mongo:27017
      - USER_SERVICE_URL=http://user-service:8080
      - PRODUCT_SERVICE_URL=http://product-service:8082
    volumes:
      - ./order-service/logs:/logs
      - ./order-service/configs:/configs
    ports:
      - 8083:8083
    depends_on:
      - mongo
      - postgres
      - kafka
      - jaeger
    networks:
      - ms-service
networks:
  ms-service:
    name: ms-service
