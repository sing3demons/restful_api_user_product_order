input {
  kafka {
    bootstrap_servers => "kafka:9092"
    topics => ["logs.user_service.detail", "logs.user_service.summary",
               "logs.product_service.detail", "logs.product_service.summary",
               "logs.order_service.detail", "logs.order_service.summary"]
    codec => "json"
    auto_offset_reset => "earliest"
    consumer_threads => 2
  }
}

filter {
  # âœ… Set logType based on kafka_topic
  if ![logType] {
    if [kafka_topic] == "logs.user_service.detail" {
      mutate { add_field => { "logType" => "detail" } }
    }
    if [kafka_topic] == "logs.user_service.summary" {
      mutate { add_field => { "logType" => "summary" } }
    }
    if [kafka_topic] == "logs.product_service.detail" {
      mutate { add_field => { "logType" => "detail" } }
    }
    if [kafka_topic] == "logs.product_service.summary" {
      mutate { add_field => { "logType" => "summary" } }
    }
    if [kafka_topic] == "logs.order_service.detail" {
      mutate { add_field => { "logType" => "detail" } }
    }
    if [kafka_topic] == "logs.order_service.summary" {
      mutate { add_field => { "logType" => "summary" } }
    }
  }

  # âœ… If logType is still missing, set to "default"
  if ![logType] {
    mutate { add_field => { "logType" => "default" } }
  }
}

# filter {
#   # Parse the JSON string inside the "message" field, if it looks like JSON
#   if [message] and [message] =~ /^\s*[\[{]/ {
#     json {
#       source => "message"
#       target => "message_parsed"
#       skip_on_invalid_json => true
#     }
#   }

#   # Flatten parsed JSON back to root or into a nested field (your choice)
#   if [message_parsed] {
#     ruby {
#       code => "
#         event.get('message_parsed').each { |k, v|
#           event.set(k, v)
#         }
#         event.remove('message')
#         event.remove('message_parsed')
#       "
#     }
#   }
# }


output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{logType}-%{+YYYY.MM.dd}"  # e.g., detail-2025.07.04, or default-2025.07.04
  }
  # Debug to console
#   stdout { codec => rubydebug }
}
